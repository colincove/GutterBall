package gameControllers.Levels;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import infoHolders.DrawInfo;
import infoHolders.UpdateInfo;

import org.jbox2d.collision.shapes.PolygonShape;
import org.jbox2d.common.Vec2;
import org.jbox2d.dynamics.Body;
import org.jbox2d.dynamics.contacts.ContactEdge;

import com.example.swings.R;

import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;

import gameControllers.Game;
import gameObjects.Actor;
import gameObjects.CollisionGroups;
import Components.BodyComponent;

public class BottomCuller extends BodyComponent {
	private List<Culling> cullList;
	private BitmapDrawable lightShaft;
	public BottomCuller(Game game) {
		super(game);
		cullList=new ArrayList<Culling>();
		lightShaft = (BitmapDrawable) game.getResources().getDrawable(R.drawable.light_pillar);
		// TODO Auto-generated constructor stub
	}
	@Override
public void createBody(){
	createBody(world.createBody(bodyDef));
}
	public void createBody(Body body)
	{
		 PolygonShape groundBox = new PolygonShape();
		 groundBox.setAsBox(game.getSimulation().getWorldSize().x,1, new Vec2(game.getSimulation().getWorldSize().x/2,game.getSimulation().getWorldSize().y+5),0.0f);
		 body.createFixture(groundBox,0.0f);
		 //
		super.createBody(body);
	}
	@Override
	public void update(UpdateInfo info){
		super.update(info);
		ContactEdge contact = body.getContactList();
		while(contact!=null)
		{
			if(((BodyComponent)contact.other.getUserData()).containsCollisionGroup(CollisionGroups.ACTOR)){
				destroyActor((Actor)contact.other.getUserData());
				((BodyComponent)contact.other.getUserData()).markDestroy();
				break;
			}
		contact=contact.next;
		
			
		}
		Iterator<Culling> iter = cullList.iterator();
		while(iter.hasNext()){
			Culling culling  = iter.next();
			if(culling.alpha<0.01){
				iter.remove();
			}else{
				culling.alpha=culling.alpha*(0.95f-0.3f*culling.alpha);
			}
		}
	}
	private void destroyActor(Actor actor){
		int jitterFactor = 2;
		Culling  culling= new Culling();
		culling.x=actor.getX();
		cullList.add(culling);
		for(int i =0;i<3; i++){
			culling  = new Culling();
			float ran=(float)(Math.random()-Math.random());
			culling.x=actor.getX()+(ran)*jitterFactor;
			culling.scale=(jitterFactor-Math.abs(ran))/jitterFactor/2+0.5f;
			culling.alpha=culling.scale;
			cullList.add(culling);
		}
	}
	@Override
	public void draw(DrawInfo drawInfo){
		super.draw(drawInfo);
		for(Culling culling : cullList){
			float ratio = 60f/425f;
			Rect des = new Rect();
			Vec2 cent = body.getWorldCenter();
			des.set((int)gameView.toScreenX(culling.x-1*culling.scale), 
					(int)gameView.toScreenY(simulation.getWorldSize().y-2/ratio*culling.scale),
					(int)gameView.toScreenX(culling.x+1*culling.scale),
					(int)gameView.toScreenY(simulation.getWorldSize().y));
			//left, top, right, bottom
			lightShaft.setBounds(des);
			lightShaft.setAlpha((int)(255*culling.alpha));
			lightShaft.draw(drawInfo.getCanvas());
		}
	}
	private class Culling {
		public float scale=1.0f;
		public float alpha=1.0f;
		public float x=0.0f;
	}
}

