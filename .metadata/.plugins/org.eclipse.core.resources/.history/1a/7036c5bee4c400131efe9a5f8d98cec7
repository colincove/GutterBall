package gameObjects.launcher;

import com.example.swings.R;

import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import infoHolders.DrawInfo;
import infoHolders.UpdateInfo;
import gameControllers.Game;
import gameObjects.animNodes.BounceFollowNode;
import gameObjects.animNodes.JointNode;
import gameObjects.animNodes.LooseFollowNode;
import gameObjects.animNodes.StiffAngleNode;
import Components.DrawableGameComponent;

public class LauncherAnimation extends DrawableGameComponent implements ILauncherListener {
	private Launcher launcher;
	private int jointNum=5;
	private JointNode[] nodes;
	private Paint paint;
	private Rect des;
	private BitmapDrawable launcher_tree, basket;
	public LauncherAnimation(Game game, Launcher launcher) {
		super(game);
		
		paint = new Paint();
		paint.setARGB(255, 255, 0, 0);
		
		launcher_tree=(BitmapDrawable) game.getResources().getDrawable(R.drawable.tree_launcher);
		basket=(BitmapDrawable) game.getResources().getDrawable(R.drawable.leaf_bag);
		
		this.launcher=launcher;
		launcher.addLauncherListener(this);
		nodes= new JointNode[jointNum];
		nodes[3]=new JointNode(launcher.getX(), launcher.getY()-2f);
		nodes[0]=new BounceFollowNode(nodes[3],launcher.getX(), launcher.getY(), 2f);
		nodes[4]=new BounceFollowNode(nodes[0],launcher.getX(), launcher.getY(),5f);
		nodes[1]=new StiffAngleNode(nodes[0],nodes[4],launcher.getX(), launcher.getY(),2f, 90f);
		nodes[2]=new StiffAngleNode(nodes[0],nodes[4],launcher.getX(), launcher.getY(),2f, -90f);
		
		
		nodes[0].fric=1.2f;
		nodes[3].fric=1.2f;
		
		
		des = new Rect();
		
		
	}
	
	@Override
	public void draw(DrawInfo info){
		super.draw(info);
		
		launcher_tree.setBounds(des);
		launcher_tree.draw(info.getCanvas());
		
		for(int i=0;i<jointNum;i++){
		info.getCanvas().drawCircle(
		gameView.toScreenX(nodes[i].x), 
		gameView.toScreenY(nodes[i].y), 
		gameView.toScreen(0.1f), 
		paint);
		
		des.set(
				(int)gameView.toScreenX(launcher.getX()-7),
				(int)gameView.toScreenY(launcher.getY()-7),
				(int)gameView.toScreenX(launcher.getX()+7),
				(int)gameView.toScreenY(launcher.getY()+7)
				);
		info.getCanvas().save();

		info.getCanvas().drawLine(
				(int)(gameView.toScreenX(launcher.getX()-0.5)),
				(int)(gameView.toScreenY(launcher.getY()-0.5)),
				(int)(gameView.toScreenX(nodes[1].x)),
				(int)(gameView.toScreenY(nodes[1].y)),
				pullPaint);
		
}
	}
	@Override
	public void update(UpdateInfo updateInfo){
		super.update(updateInfo);
		if(launcher.getState()==Launcher.PULLING){
			nodes[4].g=0;
		}else{
			nodes[4].g=0.1f;
		}
		for(int i=0;i<jointNum;i++){
			nodes[i].y+=0.1;
			nodes[i].update();
		}
		
		nodes[3].x=launcher.getX();
		nodes[3].y=launcher.getY();
		
		if(launcher.getState()==Launcher.PULLING){
			nodes[0].x=(float)(launcher.getX()+Math.cos(launcher.a)*launcher.d/300);
			nodes[0].y=(float)(launcher.getY()+Math.sin(launcher.a)*launcher.d/300);
			nodes[4].update();
			
		}
		
		
	}
	@Override
	public void enableLauncher(Launcher launcher) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void disableLauncher(Launcher launcher) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void launch(Launcher launcher, float x, float y) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void touchLauncher(Launcher launcher, float x, float y) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void pullingLauncher(Launcher launcher, float x, float y) {
		// TODO Auto-generated method stub
		
	}
	
}
