package gameObjects.launcher;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import toxi.physics.VerletParticle;
import toxi.physics.VerletPhysics;
import toxi.physics2d.ParticleString2D;
import toxi.physics2d.VerletParticle2D;
import toxi.physics2d.VerletPhysics2D;
import toxi.physics2d.VerletSpring2D;

import com.example.swings.R;

import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import infoHolders.DrawInfo;
import infoHolders.UpdateInfo;
import gameControllers.Game;
import gameObjects.animNodes.BounceFollowNode;
import gameObjects.animNodes.DoubleJointNode;
import gameObjects.animNodes.JointNode;
import gameObjects.animNodes.LooseFollowNode;
import gameObjects.animNodes.StiffAngleNode;
import Components.DrawableGameComponent;

public class LauncherAnimation extends DrawableGameComponent implements ILauncherListener {
	private Launcher launcher;
	private int jointNum=6;
	private JointNode[] nodes;
	private Paint paint;
	private Rect des;
	private VerletPhysics2D physics;
	private BitmapDrawable launcher_tree, basket, basket_full;
	public LauncherAnimation(Game game, Launcher launcher) {
		super(game);
		
		physics= new VerletPhysics2D();
		//physics.setDrag(0.005f);
		physics.setTimeStep(30f);
	
		
		VerletParticle2D p1 = new VerletParticle2D(launcher.getX()-2, launcher.getY()-3);//where the rope is tied
		VerletParticle2D p2 = new VerletParticle2D(launcher.getX()+2, launcher.getY()-3);//where the rope id tied
		
		//p1.lock();//lock the ends of the ropes
		//p2.lock();//lock the ends of the ropes
		
		List<VerletParticle2D> st1List = new ArrayList<VerletParticle2D>();
		List<VerletParticle2D> st2List = new ArrayList<VerletParticle2D>();
		st1List.add(p1);
		st2List.add(p2);
		int i=0;
		int stringDensity=5;
		VerletParticle2D p;
		//first string
		for(i=0;i<stringDensity;i++){
			p=new VerletParticle2D(launcher.getX()-2, launcher.getY()-3+i*0.6f);
			st1List.add(p);
		}
		//second string
		for(i=0;i<stringDensity;i++){
			p=new VerletParticle2D(launcher.getX()+2, launcher.getY()-3+i*0.6f);
			st1List.add(p);
		}
		
		ParticleString2D str1 = new ParticleString2D(physics, st1List, 0.0005f);
		ParticleString2D str2 = new ParticleString2D(physics, st2List, 0.0005f);
		
		VerletSpring2D s1 = new VerletSpring2D(str1.getTail(), str2.getTail(), 2, 0.3f);
		physics.addSpring(s1);
		
		/*VerletParticle2D p3 = new VerletParticle2D(launcher.getX()-2, launcher.getY()+.5f);//end of rope attached to basket
		VerletParticle2D p4 = new VerletParticle2D(launcher.getX()+2, launcher.getY()+.5f);//end of rope attached to basket
		
		VerletSpring2D s1 = new VerletSpring2D(p1, p3, 1f, 0.005f);//constraint between the two ends of the rope
		VerletSpring2D s2 = new VerletSpring2D(p2, p4, 1f, 0.005f);//constraint between the two ends of the rope
		
		
		VerletSpring2D s3 = new VerletSpring2D(p3, p4, 2, 0.3f);//connect ends of rope to create stiff basket 
		
		physics.addParticle(p1);
		physics.addParticle(p2);
		physics.addParticle(p3);
		physics.addParticle(p4);
		
		physics.addSpring(s1);
		physics.addSpring(s2);
		physics.addSpring(s3);*/
		
		
		paint = new Paint();
		paint.setARGB(255, 199, 221, 71);
		paint.setStrokeWidth(3);
		
		launcher_tree=(BitmapDrawable) game.getResources().getDrawable(R.drawable.tree_launcher);
		basket=(BitmapDrawable) game.getResources().getDrawable(R.drawable.leaf_bag);
		basket_full=(BitmapDrawable) game.getResources().getDrawable(R.drawable.leaf_bag_full);
		
		this.launcher=launcher;
		launcher.addLauncherListener(this);
		nodes= new JointNode[jointNum];
		nodes[3]=new JointNode(launcher.getX(), launcher.getY()-2f);
		nodes[0]=new BounceFollowNode(nodes[3],launcher.getX(), launcher.getY(), 2f);
		nodes[4]=new BounceFollowNode(nodes[0],launcher.getX(), launcher.getY(),5f);
		nodes[1]=new StiffAngleNode(nodes[0],nodes[4],launcher.getX(), launcher.getY(),2f, 90f);
		nodes[2]=new StiffAngleNode(nodes[0],nodes[4],launcher.getX(), launcher.getY(),2f, -90f);
		nodes[5]=new DoubleJointNode(nodes[1],nodes[2], launcher.getX(), launcher.getY(),1f);
		
		
		nodes[0].fric=1.2f;
		nodes[3].fric=1.4f;
		
		
		des = new Rect();
		
		
	}
	
	@Override
	public void draw(DrawInfo info){
		super.draw(info);
		
	
		/*des.set(
				(int)gameView.toScreenX(launcher.getX()-7),
				(int)gameView.toScreenY(launcher.getY()-7),
				(int)gameView.toScreenX(launcher.getX()+7),
				(int)gameView.toScreenY(launcher.getY()+7)
				);
		launcher_tree.setBounds(des);
		launcher_tree.draw(info.getCanvas());
		
		for(int i=0;i<jointNum;i++){
		info.getCanvas().drawCircle(
		gameView.toScreenX(nodes[i].x), 
		gameView.toScreenY(nodes[i].y), 
		gameView.toScreen(0.1f), 
		paint);
		
		
		info.getCanvas().save();
		info.getCanvas().drawLine(
				(int)(gameView.toScreenX(launcher.getX()-2.5)),
				(int)(gameView.toScreenY(launcher.getY()-2)),
				(int)(gameView.toScreenX(nodes[1].x)),
				(int)(gameView.toScreenY(nodes[1].y)),
				paint);
		info.getCanvas().drawLine(
				(int)(gameView.toScreenX(launcher.getX()+2.5)),
				(int)(gameView.toScreenY(launcher.getY()-2)),
				(int)(gameView.toScreenX(nodes[2].x)),
				(int)(gameView.toScreenY(nodes[2].y)),
				paint);
		
		des.set(
				(int)gameView.toScreenX(nodes[5].x-2),
				(int)gameView.toScreenY(nodes[5].y-2),
				(int)gameView.toScreenX(nodes[5].x+2),
				(int)gameView.toScreenY(nodes[5].y+2)
				);
		
		info.getCanvas().save();
		info.getCanvas().rotate((float)Math.toDegrees(nodes[4].a)-90, gameView.toScreenX(nodes[5].x),
				gameView.toScreenY(nodes[5].y));
		if(launcher.getState()==Launcher.DISABLED){
			basket.setBounds(des);
			basket.draw(info.getCanvas());
		}else{
			basket_full.setBounds(des);
			basket_full.draw(info.getCanvas());
		}
		
		info.getCanvas().restore();
		*/
		for(VerletParticle2D p  : physics.particles ){
			info.getCanvas().drawCircle(
					gameView.toScreenX(p.getPreviousPosition().x), 
					gameView.toScreenY(p.getPreviousPosition().y), 
					gameView.toScreen(0.1f), 
					paint);
		}
		
		

	}
	@Override
	public void update(UpdateInfo updateInfo){
		super.update(updateInfo);
		physics.update();
		if(launcher.getState()==Launcher.PULLING){
			nodes[4].g=0;
			nodes[0].g=0f;
		}else{
			nodes[4].g=0.1f;
			nodes[0].g=0.2f;
		}
		if(nodes[4].a<0){
			nodes[4].a*=-1;
		}
		for(int i=0;i<jointNum;i++){
			nodes[i].y+=0.1;
			nodes[i].update();
		}
		
		nodes[3].x=launcher.getX();
		nodes[3].y=launcher.getY();
		
		if(launcher.getState()==Launcher.PULLING){
			nodes[0].x=(float)(launcher.getX()+Math.cos(launcher.a)*launcher.d/100);
			nodes[0].y=(float)(launcher.getY()+Math.sin(launcher.a)*launcher.d/100);
			nodes[4].update();
			
		}
		
		
	}
	@Override
	public void enableLauncher(Launcher launcher) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void disableLauncher(Launcher launcher) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void launch(Launcher launcher, float x, float y) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void touchLauncher(Launcher launcher, float x, float y) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void pullingLauncher(Launcher launcher, float x, float y) {
		// TODO Auto-generated method stub
		
	}
	
}
